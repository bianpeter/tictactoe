{"version":3,"sources":["components/Square.tsx","components/Board.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","Game","status","useState","xIsNext","setXIsNext","stepNumber","setStepNumber","Array","fill","history","setHistory","current","winner","moves","map","step","move","desc","jumpTo","newHistory","slice","concat","handleClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcfee5b9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ntype SquareValue = 'X'| 'O'| null;\r\n\r\ninterface SquareProps {\r\n  onClick(): void;\r\n  value: SquareValue;\r\n}\r\n\r\nconst Square: React.FC<SquareProps> = (props) => {\r\n  return (\r\n    <div>\r\n      <button className=\"square\" onClick={props.onClick}>{props.value}</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Square\r\n","import React, {ReactNode} from 'react';\r\nimport Square from './Square';\r\n\r\ntype SquareValue = 'X'| 'O'| null;\r\n\r\ninterface BoardProps {\r\n  onClick(i: number) : void;\r\n  squares: SquareValue[];\r\n}\r\n\r\nconst Board: React.FC<BoardProps> = (props) => {\r\n\r\n  const renderSquare = (i:number): ReactNode => {\r\n    return(\r\n      <Square\r\n        value={props.squares[i]}\r\n        onClick={() => props.onClick(i)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className='board'>\r\n      <div className='column'>\r\n        <div className='row'>\r\n          {renderSquare(0)}\r\n          {renderSquare(1)}\r\n          {renderSquare(2)}\r\n        </div>\r\n        <div className='row'>\r\n          {renderSquare(3)}\r\n          {renderSquare(4)}\r\n          {renderSquare(5)}\r\n        </div>\r\n        <div className='row'>\r\n          {renderSquare(6)}\r\n          {renderSquare(7)}\r\n          {renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board\r\n","import React, {useState} from 'react'\r\nimport Board from './Board'\r\n\r\nconst calculateWinner = (squares: SquareValue[]): SquareValue => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\ntype SquareValue = 'X'| 'O'| null;\r\n\r\nconst Game:React.FC = () => {\r\n  const [xIsNext, setXIsNext] = useState<boolean>(true);\r\n  const [stepNumber, setStepNumber] = useState<number>(0);\r\n  const [history, setHistory] = useState<{squares:SquareValue[]}[]>([\r\n    {squares:Array(9).fill(null)}\r\n  ]);\r\n\r\n  const handleClick = (i:number): void => {\r\n    const newHistory = history.slice(0, stepNumber + 1);\r\n    const current = newHistory[newHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? 'X' : 'O';\r\n    setHistory(newHistory.concat([\r\n      {squares:squares}\r\n    ]));\r\n    setStepNumber(newHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step: number): void => {\r\n    setStepNumber(step);\r\n    setXIsNext((step % 2 === 0))\r\n  };\r\n\r\n  const current = history[stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const desc = move ?\r\n      'Go to move #' + move :\r\n      'Go to game start';\r\n      return(\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n  });\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = 'Winner: ' + winner;\r\n  } else {\r\n    status = 'Next player: ' + (xIsNext ? 'X' : '0');\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <div className='game'>\r\n      <h1>Tic Tac Toe</h1>\r\n      {/*<div className=\"game-start\">\r\n        <label>Player 1</label>\r\n        <input type=\"text\" onChange={changeHandler}></input>\r\n        <label>Player 2</label>\r\n        <input type=\"text\" onChange={changeHandler}></input>\r\n  </div>*/}\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={i => handleClick(i)}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <div>{moves}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Game\r\n","import React from 'react';\nimport './style/App.scss';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}